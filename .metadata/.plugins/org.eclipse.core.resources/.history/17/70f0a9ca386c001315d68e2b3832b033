import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Map;

public class Get {
	public static void main(String[] args) {
//		URL url;
//		try {
//			url = new URL("http://192.168.1.162/dianying");
//			StringBuffer html = new StringBuffer();
//			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//			conn.setConnectTimeout(5 * 1000);
//			conn.setRequestMethod("GET");
//			conn.setRequestProperty("page", "2");
//			String str = conn.getResponseMessage();
//			InputStreamReader isr = new InputStreamReader(
//					conn.getInputStream(), "utf-8");
//			BufferedReader br = new BufferedReader(isr);
//			String temp;
//			while ((temp = br.readLine()) != null) {
//				html.append(temp);
//			}
//			br.close(); // 关闭
//			isr.close(); // 关闭
//			System.out.println(html.toString());
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		sendGet("http://192.168.1.162/dianying", "");
	}

	public static String sendGet(String url, String param) {
		String result = "";
		BufferedReader in = null;
		try {
			String urlName = url + "?" + param;
			URL realUrl = new URL(urlName);
			// 打开和URL之间的连接
			URLConnection conn = realUrl.openConnection();
			// 设置通用的请求属性
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
			conn.setRequestProperty("page", "2");
			// 建立实际的连接
			conn.connect();
			// 获取所有响应头字段
			Map<String, List<String>> map = conn.getHeaderFields();
			// 遍历所有的响应头字段
			for (String key : map.keySet()) {
				System.out.println(key + "--->" + map.get(key));
			}
			// 定义BufferedReader输入流来读取URL的响应
			in = new BufferedReader(
					new InputStreamReader(conn.getInputStream()));
			String line;
			while ((line = in.readLine()) != null) {
				result += "/n" + line;
			}
		} catch (Exception e) {
			System.out.println("发送GET请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输入流
		finally {
			try {
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		return result;
	}
}
